[project]
name = "greyhorse"
description = "Greyhorse library"
license = {file = "LICENSE"}
requires-python = ">=3.12"

[tool.ruff]
line-length = 96
# Group violations by containing file.
output-format = "grouped"
# Enable preview features.
preview = true
# Enumerate all fixed violations.
show-fixes = true

[tool.ruff.format]
# Enable reformatting of code snippets in docstrings.
docstring-code-format = true
# Enable preview style formatting.
preview = true
# Prefer single quotes over double quotes.
quote-style = "single"
skip-magic-trailing-comma = true

[tool.ruff.lint.isort]
split-on-trailing-comma = false

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "B", "Q", "ANN", "RET", "SLF", "SIM", "UP", "COM", "PL", "PERF", "RUF"]
ignore = ["F402", "E701", "UP032", "Q000", "Q003", "COM812"]

explicit-preview-rules = true

[tool.ruff.lint.pylint]
max-args = 10

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = ["PLR2004", "PLR0915"]

[tool.mypy]
python_version = "3.12"
plugins = "pydantic.mypy,sqlalchemy.ext.mypy.plugin"
pretty = true
allow_redefinition = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true
disallow_any_generics = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_errors = false
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = true
show_column_numbers = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = false
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true
warn_unreachable = true
disable_error_code = [
    "no-redef", "valid-type", "attr-defined", "type-arg", "var-annotated",
    "no-untyped-def", "no-untyped-call", "name-defined", "used-before-def"
]
exclude = "*/tests/broken/*"

[tool.pytest.ini_options]
addopts = [
  "--tb=short",
  "--cov-report=term",
  "--cov-report=html",
  "--ignore-glob=tests/broken",
]
testpaths = [
  "tests",
]

[tool.coverage.report]
exclude_lines = [
    "except ImportError",
    "if TYPE_CHECKING:",
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
]
